name: package-lint
'on':
  push:
    # paths:
    # - '**.el'
jobs:
  lint:
    strategy:
      matrix:
        emacs_version:
        - snapshot
    runs-on: ubuntu-latest
    steps:
    - uses: purcell/setup-emacs@master
      with:
        version: ${{ matrix.emacs_version }}
    - uses: actions/checkout@v2
    - run: echo LOCAL_PACKAGES="podman" >> $GITHUB_ENV
    - run: |
        tmp=$(mktemp)
        cat > $tmp <<LISP
        (progn
          (require 'package)
          (push '("melpa" . "https://melpa.org/packages/")
                package-archives)
          (package-initialize))
        LISP
        echo EMACS="emacs -l $tmp -L ." >> $GITHUB_ENV
      name: Set the arguments
    - run: " packages=$(mktemp)\n echo -n \"Installed packages: \"\n cat <(jq -r '.nodes.root.inputs
        | map(.) | .[]' .nomake/flake.lock) \\\n   <(jq -r 'keys | .[]' .nomake/archive.lock)
        \\\n   <(echo 'package-lint') \\\n   | tee \"$packages\" | xargs echo\n\n
        script=$(mktemp)\n cat > $script <<LISP\n (progn\n   (when command-line-args-left\n
        \    (package-refresh-contents))\n   (dolist (package-name command-line-args-left)\n
        \    (let ((package (intern package-name)))\n        (when (and package\n
        \                  (not (memq package '(${LOCAL_PACKAGES}))))\n        (package-install
        (cadr (assq package \n                                     package-archive-contents)))))))\nLISP\n\nxargs
        $EMACS -batch -l \"$script\" < \"$packages\"\n"
      name: Install dependencies
    - run: |
        $EMACS -batch -l bytecomp \
          --eval "(setq byte-compile-error-on-warn t)" \
          -f batch-byte-compile 'podman-core.el' 'podman-pod.el' 'podman-utils.el' 'podman.el'
      name: Byte-compile
      if: ${{ true }}
    - run: |-
        $EMACS  -batch -l package-lint \
          --eval "(setq package-lint-main-file \"podman.el\")" \
          -f package-lint-batch-and-exit 'podman-core.el' 'podman-pod.el' 'podman-utils.el' 'podman.el'
      name: Run package-lint
